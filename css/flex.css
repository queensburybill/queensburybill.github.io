* {
  box-sizing: border-box;
}
.flex-container div {
  border: 1px #ccc solid;
  padding: 10px;
}
h1, h2, h3, h4, h5, h6 {
  background-color: #eee;
  margin: 0 6px;
}

/*********************************/
/*** FLEX CONTAINER **************/
/*********************************/
.flex-container {
  /********************************** 
  DISPLAY 
  Enables flex for all children
  */
  display: flex; 
  /* display: inline-flex; */

  /********************************** 
  FLEX-DIRECTION 
  Establishes the main axis 
  */
  flex-direction: row;
  /* flex-direction: row-reverse; */
  /* flex-direction: column; */
  /* flex-direction: column-reverse; */

  /********************************** 
  FLEX-WRAP
  Wraps items if they can't all
  be made to fit on one line. 
  */
  flex-wrap: wrap;
  /* flex-wrap: nowrap; */
  /* flex-wrap: wrap-reverse; */

  /********************************** 
  JUSTIFY-CONTENT
  Attempts to distribute extra 
  space on the main axis. 
  */
  justify-content: flex-start;
  /* justify-content: flex-end; */
  /* justify-content: center; */
  /* justify-content: space-between; */
  /* justify-content: space-around; */
  /* justify-content: space-evenly; */

  /********************************** 
  ALIGN-ITEMS
  Only has an effect with more 
  than one line of content. 
  Examples shown here use flex-wrap. 
  */
  /* align-items: flex-start; */
  /* align-items: flex-end; */
  /* align-items: center; */
  /* align-items: baseline; */
  /* align-items: stretch; */

  /********************************** 
  ALIGN-CONTENT
  Determines how items are 
  laid out on the cross axis. 
  */
  /* align-content: flex-start; */
  /* align-content: flex-end; */
  /* align-content: center; */
  /* align-content: space-between; */
  /* align-content: space-around; */
  /* align-content: stretch; */


  /* height: 600px; */
}

/*********************************/
/*** FLEX CHILDREN ***************/
/*********************************/
.flex-container-boxes {
  /********************************** 
  ORDER
  Allows you to explictly set the order 
  you want each child to appear in. 
  */
  /* order: integer; */

  /********************************** 
  FLEX-BASIS
  Defines the size of an element before 
  remaining space is distributed. Accepts
  percent, em, px, etc... plus a number of
  keywords: see https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis
  */
  /* flex-basis: [amount]; */

  /********************************** 
  FLEX-GROW
  Allows you to determine how each child is 
  allowed to grow as a part of a whole. 
  (ie: If you have 3 boxes set to 1, 1 & 3
  respectively, boxes 1 & 2 will have a 
  flex-basis of 20% and box 3 will be 60%).
  Only really useful with a set size or flex-basis.
  */
  /* flex-grow: integer; (default = 1) */

  /********************************** 
  FLEX-SHRINK
  Allows an item to shrink if necessary. 
  Only really useful with a set size or flex-basis.
  */
  /* flex-shrink: integer; (default = 1) */

  /********************************** 
  ALIGN-SELF
  Sets alignment for individual item using 
  same options as "align-items."
  */
  /* align-self: flex-start; */
  /* align-self: flex-end; */
  /* align-self: center; */
  /* align-self: baseline; */
  /* align-self: stretch; */


  flex-basis: content;
  /* margin: 0 8px; */
}
/* .flex-container-box-1 {
  flex-grow: 1;
  flex-shrink: 1;
}
.flex-container-box-2 {
  flex-grow: 2;
  flex-shrink: 2;
  align-self: flex-end;

}
.flex-container-box-3 {
  flex-grow: 3;
  flex-shrink: 3;
}
.flex-container-box-4 {
  flex-grow: 1;
  flex-shrink: 1;
}
.flex-container-box-5 {
  flex-grow: 3;
  flex-shrink: 3;
} */